[{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"introduction-to-the-priorcon-package-tutorial","dir":"Articles","previous_headings":"","what":"Introduction to the priorCON Package (tutorial)","title":"Introduction to priorCON","text":"priorCON package offers innovative tool-set incorporates graph community detection methods systematic conservation planning. package designed enhance spatial prioritization focusing protection areas high ecological connectivity. Unlike traditional approaches prioritize individual planning units, priorCON focuses clusters features exhibit strong ecological linkages. priorCON package built upon prioritizr package (Hanson et al., 2024), using commercial open-source exact algorithm solvers ensure optimal solutions prioritization problems. Features priorCON Graph Community Detection: package utilizes connectivity metrics identify clusters habitat patches high connectivity values. Spatial prioritization: package uses connectivity metrics inputs prioritizr identify areas high connectivity. Connectivity Estimation: package estimates connectivity protection level calculating protected connections. Post-processing: package can used produce download outputs analysis shapefiles, matrices tmap plots. workflow shown Fig. 1. Fig. 1: Flow chart priorCON prioritization analysis. priorCON functions indicated grey boxes tutorial guide key functions package, data preparation generating informative outputs address conservation connectivity challenges diverse ecosystems.","code":""},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"workflow-running-the-analysis","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial)","what":"Workflow: Running the analysis","title":"Introduction to priorCON","text":"package provides 4 steps perform analysis: Preprocessing (Optional): Function preprocess_graphs() built order create edge lists various inputs formats. Connectivity metrics estimation: Function get_metrics() built calculate following graph metrics: degree, eigenvector centrality, betweenness centrality, louvain clustering, walktrap clustering, s-core, PageRank. Prioritization: Functions basic_scenario() connectivity_scenario() used insert data prioritizr run prioritization problem obtain optimum solutions. Post-processing: Function get_outputs() used order plot interactive maps export tables, shapefiles rasters results functions steps 1 2 can used within spatial conservation planning workflow described also independently create obtain graph metrics might also useful within research contexts. next sections provide illustrative example explain detail functions operate.","code":""},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"illustration-example","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial)","what":"Illustration example","title":"Introduction to priorCON","text":"Let us consider following dataset illustrative example. area examined Thermaikos gulf Greece. example, Lagrangian model run area, estimate connectivity. connectivity incorporated analysis obtain areas need protected maximize connectivity protection. Preprocessing necessary case order transform Lagrangian data edge list.","code":""},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"step-1-preprocessing-optional","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial) > Illustration example","what":"Step 1 Preprocessing (Optional):","title":"Introduction to priorCON","text":"input edge list required graph theoretic approaches. Fig. 2 represents typical directed weighted graph. edge list, first two columns utilize nodes IDs represent edges last column corresponds value edges. value actually represents connectivity value corresponding nodes may represent instance values resulting particle drift models, migration probabilities . preprocessing step can conducted using function preprocess_graphs() serves reading transforming initial input data edge list. details initial data formats given . case edge list available, step can skipped. Fig. 2: Weighted directed graph (left): Circles represent nodes arrows represent weighted edges. tabular representation graph represents edge list (right). Function preprocess_graphs() takes input list .txt/.csv objects. object represents connections node nodes. model read data, necessary .txt/.csv objects one folder. two ways incorporate connectivity data, based linkage features: Case 1: connectivity data correspond specific biodiversity features. biodiversity feature connectivity dataset file including edge lists needs name corresponding feature. example, consider 5 species (f1, f2, f3, f4, f5) 5 connectivity datasets. connectivity datasets need separate folders named: f1,f2,f3,f4,f5 algorithm understand correspond species. Case 2: connectivity dataset represents spatial pattern directly connected specific biodiversity feature. connectivity data need included separate folder named different way species. example consider 5 species (f1,f2,f3,f4,f5) 1 connectivity dataset. dataset can included separate folder (e.g. “Langragian_con”). example use connectivity values directly connected specific species, therefore illustrate Case 2. Fig. 3 represents structure used tutorial. data need stored way order algorithm read properly. Fig. 3: Connectivity folder typical Lagrangian output set files representing likelihood point moving origin (source) destination (target). can represented using list .txt files (many origin points) including information destination probability. .txt files need named increasing order. name files need correspond numbering points, order algorithm match coordinates points (Fig. 4). Fig. 4: 001.txt file contains following information: row represents probability movement point 001 destination points. long data set way, preprocessing algorithm can run transform format inputs edge list. edge list dataset available, preprocessing step can skipped.","code":"# Import packages library(priorCON) library(tmap) library(terra)  # Read connectivity files from folder and combine them   combined_edge_list <- preprocess_graphs(     system.file(\"external\",package=\"priorCON\"),     header = FALSE, sep =\";\"    )"},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"step-2-connectivity-metrics-estimation","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial) > Illustration example","what":"Step 2 Connectivity Metrics Estimation:","title":"Introduction to priorCON","text":"Function get_metrics() used calculate graph metrics values. edge lists created previous step, inserted directly user used step create graphs. directed graphs transformed undirected. function based igraph package (Csárdi Nepusz, 2006; Csárdi et al., 2024) used create clusters using Louvain Walktrap calculate following metrics: Eigenvector Centrality, Betweenness Centrality Degree PageRank. S-core calculated using package brainGraph (Watson, 2024). user can choose options create respective outputs. 's_core', 'louvain', 'walktrap', 'eigen', 'betw', 'deg' 'page_rank'. Detailed information theory equations used graph metrics provided Nagkoulis et al.(2024; subm Methods Ecology Evolution).","code":"# Set seed for reproducibility set.seed(42)  # Detect graph communities using the s-core algorithm pre_graphs <- get_metrics(combined_edge_list, which_community = \"s_core\")"},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"step-3-prioritization","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial) > Illustration example","what":"Step 3 Prioritization:","title":"Introduction to priorCON","text":"Two alternative functions can used prioritization step: ) connectivity_scenario() function, includes connectivity optimization procedure ii) basic_scenario() function, include connectivity. two functions can run separately. Users may use functions, wish compare results obtained two scenarios, .e. without connectivity. Alternatively, connectivity_scenario() function can run obtain prioritization outputs connectivity scenario. functions based priorititizr package (Hanson et al., 2024). connectivity metrics first transformed rasters, following approach similar Marxan Connect (Daigle et al., 2020). priorititizr maximizes utility obtained protecting features connections. Mathematically, target optimization maximize U budget (B) limitations (eq. 2 3 Nagkoulis et al.(2024)): U=∑𝐏𝐔𝐢∈SA−λci+∑𝐏𝐔𝐢∈SA∑j=1Jμjfj+∑𝐏𝐔𝐢∈SA∑j=1JμjMj, U = \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} -\\lambda c_i + \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} \\sum_{j=1}^J \\mu_j f_j + \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} \\sum_{j=1}^J \\mu_j M_j, ∑𝐏𝐔𝐢∈SAci≤B \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} c_i \\leq B set planning units 𝐀=(𝐏𝐔1,𝐏𝐔2,...,𝐏𝐔𝐢,...,𝐏𝐔𝐢)\\boldsymbol{}=(\\boldsymbol{PU}_1, \\boldsymbol{PU}_2, ..., \\boldsymbol{PU_i}, ..., \\boldsymbol{PU_i}) considered protected 𝐏𝐔𝐢∈SA\\boldsymbol{PU_i} \\, \\\\, SA. protection 𝐏𝐔𝐢\\boldsymbol{PU_i} results cost cic_i. finite set features 𝐅=(F1,F2,...,Fj,...,FJ)\\boldsymbol{F}=(F_1, F_2, ... , F_j, ..., F_J) also distributed AA, suggesting features can spatially mapped within PUs. PUPU thus defined spatial object containing following properties: 𝐏𝐔𝐢=(f1,f2,...,fj,...,fJ,ci)\\boldsymbol{PU_i}=(f_1, f_2, ..., f_j, ..., f_J, c_i), fjf_j indicates quantity FjF_j located PUiPU_i. use annotation MjM_j values metric every feature jj. inserting metrics analysis, PU’s (𝐏𝐔𝐢\\boldsymbol{PU_i}) properties extended can expressed follows: 𝐏𝐔𝐢=(f1,f2,...,fj,...,fJ,M1,M2,...,Mj,...,MJ,ci)\\boldsymbol{PU_i} = (f_1, f_2, ..., f_j, ..., f_J, M_1, M_2, ..., M_j, ..., M_J, c_i). first input can given algorithm typical cost layer representing cost protecting single planning unit. cost layer inserted prioritizr. cost layer available, cost layer planning units equal cost can inserted (Fig. 5. algorithm needs cost layer, order determine planning units. Fig. 5: Cost raster second input features rasters. case rasters available, raster equal values can given algorithm. case used pseudo-raster, adding noise improve performance algorithm. Fig. 6: Features raster","code":"# Set tmap to “view” mode tmap_mode(\"view\")  # Read the cost raster cost_raster <- get_cost_raster()  # Plot the cost raster with tmap tm_shape(cost_raster) +   tm_raster(title = \"cost\") # Read the features raster features <- get_features_raster()  # Plot the features raster with tmap tm_shape(features) +   tm_raster(title = \"f1\") # Solve an ordinary prioritizr prioritization problem basic_solution <- basic_scenario(                     cost_raster = cost_raster,                     features    = features,                     budget_perc = 0.1                   )  # Solve a prioritizr prioritization problem, # by incorporating graph connectivity of the features connectivity_solution <- connectivity_scenario(                            cost_raster = cost_raster,                            features    = features,                            budget_perc = 0.1,                            pre_graphs  = pre_graphs                          )"},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"step-4-post-processing","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial) > Illustration example","what":"Step 4: Post-processing:","title":"Introduction to priorCON","text":"results obtained prioritizr presented using matrices plots, allowing user compare outcomes incorporating connectivity metrics analysis. Function get_outputs() takes input prioritization solution. user can also get outputs shapefiles raster use analysis. Fig. 7: Basic solution connections shown Fig. 8: Connectivity solution connections shown","code":"# Get outputs from basic_scenario function for feature “f1” basic_outputs <- get_outputs(solution   = basic_solution,                               feature    = \"f1\",                              pre_graphs = pre_graphs) basic_outputs$tmap # Print summary of features and connections held # percentages for basic scenario print(basic_outputs$connectivity_table) ##  feature relative_held connections(%) ## 1     f1      0.178563              0 # Get outputs from connectivity_scenario function for feature “f1” connectivity_outputs <- get_outputs(solution   = connectivity_solution,                                     feature    = \"f1\",                                     pre_graphs = pre_graphs) connectivity_outputs$tmap # Print summary of features and connections held percentages # for connectivity scenario print(connectivity_outputs$connectivity_table) ##  feature relative_held connections(%) ## 1     f1     0.1637209      0.3339886"},{"path":"https://cadam00.github.io/priorCON/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"Introduction to the priorCON Package (tutorial)","what":"References","title":"Introduction to priorCON","text":"Csárdi, Gábor, Tamás Nepusz. 2006. “igraph software package complex network research.” InterJournal Complex Systems: 1695. https://igraph.org. Csárdi, Gábor, Tamás Nepusz, Vincent Traag, Szabolcs Horvát, Fabio Zanini, Daniel Noom, Kirill Müller. 2024.  igraph: Network Analysis Visualization R. https://doi.org/10.5281/zenodo.7682609. Daigle, Rémi M., Anna Metaxas, Arieanna C. Balbar, Jennifer McGowan, Eric . Treml, Caitlin D. Kuempel, Hugh P. Possingham, Maria Beger. 2020. “ Operationalizing ecological connectivity spatial conservation planning Marxan Connect.” Methods Ecology Evolution 11 (4): 570–79. https://doi.org/10.1111/2041-210X.13349. Hanson, Jeffrey O, Richard Schuster, Nina Morrell, Matthew Strimas-Mackey, Brandon P M Edwards, Matthew E Watts, Peter Arcese, Joseph R Bennett, Hugh P Possingham. 2024.  prioritizr: Systematic Conservation Prioritization R. https://CRAN.R-project.org/package=prioritizr. Watson, Christopher G. 2024. brainGraph: Graph Theory Analysis Brain MRI Data. https://doi.org/10.32614/CRAN.package.brainGraph.","code":""},{"path":"https://cadam00.github.io/priorCON/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christos Adam. Author, maintainer. Aggeliki Doxa. Author. Nikolaos Nagkoulis. Author. Maria Papazekou. Author. Antonios D. Mazaris. Author. Stelios Katsanevakis. Author.","code":""},{"path":"https://cadam00.github.io/priorCON/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Adam C, Doxa , Nagkoulis N, Papazekou M, Mazaris , Katsanevakis S (2025). priorCON: Graph Community Detection Methods Systematic Conservation Planning. R package version 0.1.4, https://cadam00.github.io/priorCON/, https://github.com/cadam00/priorCON.","code":"@Manual{,   title = {priorCON: Graph Community Detection Methods into Systematic Conservation Planning},   author = {Christos Adam and Aggeliki Doxa and Nikolaos Nagkoulis and Maria Papazekou and Antonios D. Mazaris and Stelios Katsanevakis},   year = {2025},   note = {R package version 0.1.4, https://cadam00.github.io/priorCON/},   url = {https://github.com/cadam00/priorCON}, }"},{"path":"https://cadam00.github.io/priorCON/index.html","id":"introduction-to-the-priorcon-package-tutorial","dir":"","previous_headings":"","what":"Graph Community Detection Methods into Systematic Conservation Planning","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"priorCON package offers innovative tool-set incorporates graph community detection methods systematic conservation planning. package designed enhance spatial prioritization focusing protection areas high ecological connectivity. Unlike traditional approaches prioritize individual planning units, priorCON focuses clusters features exhibit strong ecological linkages. priorCON package built upon prioritizr package (Hanson et al., 2024), using commercial open-source exact algorithm solvers ensure optimal solutions prioritization problems. Features priorCON Graph Community Detection: package utilizes connectivity metrics identify clusters habitat patches high connectivity values. Spatial prioritization: package uses connectivity metrics inputs prioritizr identify areas high connectivity. Connectivity Estimation: package estimates connectivity protection level calculating protected connections. Post-processing: package can used produce download outputs analysis shapefiles, matrices tmap plots. workflow shown Fig. 1. Fig. 1: Flow chart priorCON prioritization analysis. priorCON functions indicated grey boxes tutorial guide key functions package, data preparation generating informative outputs address conservation connectivity challenges diverse ecosystems.","code":""},{"path":"https://cadam00.github.io/priorCON/index.html","id":"workflow-running-the-analysis","dir":"","previous_headings":"","what":"Workflow: Running the analysis","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"package provides 4 steps perform analysis: Preprocessing (Optional): Function preprocess_graphs() built order create edge lists various inputs formats. Connectivity metrics estimation: Function get_metrics() built calculate following graph metrics: degree, eigenvector centrality, betweenness centrality, louvain clustering, walktrap clustering, s-core, PageRank. Prioritization: Functions basic_scenario() connectivity_scenario() used insert data prioritizr run prioritization problem obtain optimum solutions. Post-processing: Function get_outputs() used order plot interactive maps export tables, shapefiles rasters results functions steps 1 2 can used within spatial conservation planning workflow described also independently create obtain graph metrics might also useful within research contexts. next sections provide illustrative example explain detail functions operate.","code":""},{"path":"https://cadam00.github.io/priorCON/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"functions package can installed CRAN R via Alternatively, package priorCON can installed development version Github R via","code":"install.packages(\"priorCON\") if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"cadam00/priorCON\")"},{"path":"https://cadam00.github.io/priorCON/index.html","id":"illustration-example","dir":"","previous_headings":"","what":"Illustration example","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"Let us consider following dataset illustrative example. area examined Thermaikos gulf Greece. example, Lagrangian model run area, estimate connectivity. connectivity incorporated analysis obtain areas need protected maximize connectivity protection. Preprocessing necessary case order transform Lagrangian data edge list.","code":""},{"path":"https://cadam00.github.io/priorCON/index.html","id":"step-1-preprocessing-optional","dir":"","previous_headings":"Illustration example","what":"Step 1 Preprocessing (Optional):","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"input edge list required graph theoretic approaches. Fig. 2 represents typical directed weighted graph. edge list, first two columns utilize nodes IDs represent edges last column corresponds value edges. value actually represents connectivity value corresponding nodes may represent instance values resulting particle drift models, migration probabilities . preprocessing step can conducted using function preprocess_graphs() serves reading transforming initial input data edge list. details initial data formats given . case edge list available, step can skipped.  Fig. 2: Weighted directed graph (left): Circles represent nodes arrows represent weighted edges. tabular representation graph represents edge list (right). Function preprocess_graphs() takes input list .txt/.csv objects. object represents connections node nodes. model read data, necessary .txt/.csv objects one folder. two ways incorporate connectivity data, based linkage features: Case 1: connectivity data correspond specific biodiversity features. biodiversity feature connectivity dataset file including edge lists needs name corresponding feature. example, consider 5 species (f1, f2, f3, f4, f5) 5 connectivity datasets. connectivity datasets need separate folders named: f1,f2,f3,f4,f5 algorithm understand correspond species. Case 2: connectivity dataset represents spatial pattern directly connected specific biodiversity feature. connectivity data need included separate folder named different way species. example consider 5 species (f1,f2,f3,f4,f5) 1 connectivity dataset. dataset can included separate folder (e.g. “Langragian_con”). example use connectivity values directly connected specific species, therefore illustrate Case 2. Fig. 3 represents structure used tutorial. data need stored way order algorithm read properly.  Fig. 3: Connectivity folder typical Lagrangian output set files representing likelihood point moving origin (source) destination (target). can represented using list .txt files (many origin points) including information destination probability. .txt files need named increasing order. name files need correspond numbering points, order algorithm match coordinates points (Fig. 4).  Fig. 4: 001.txt file contains following information: row represents probability movement point 001 destination points. long data set way, preprocessing algorithm can run transform format inputs edge list. edge list dataset available, preprocessing step can skipped.","code":"# Import packages library(priorCON) library(tmap) library(terra)  # Read connectivity files from folder and combine them   combined_edge_list <- preprocess_graphs(     system.file(\"external\",package=\"priorCON\"),     header = FALSE, sep =\";\"    )"},{"path":"https://cadam00.github.io/priorCON/index.html","id":"step-2-connectivity-metrics-estimation","dir":"","previous_headings":"Illustration example","what":"Step 2 Connectivity Metrics Estimation:","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"Function get_metrics() used calculate graph metrics values. edge lists created previous step, inserted directly user used step create graphs. directed graphs transformed undirected. function based igraph package (Csárdi Nepusz, 2006; Csárdi et al., 2024) used create clusters using Louvain Walktrap calculate following metrics: Eigenvector Centrality, Betweenness Centrality, Degree PageRank. S-core calculated using package brainGraph (Watson, 2024). user can choose options create respective outputs. 's_core', 'louvain', 'walktrap', 'eigen', 'betw', 'deg' 'page_rank'. Detailed information theory equations used graph metrics provided Nagkoulis et al.(2024; subm Methods Ecology Evolution).","code":"# Set seed for reproducibility set.seed(42)  # Detect graph communities using the s-core algorithm pre_graphs <- get_metrics(combined_edge_list, which_community = \"s_core\")"},{"path":"https://cadam00.github.io/priorCON/index.html","id":"step-3-prioritization","dir":"","previous_headings":"Illustration example","what":"Step 3 Prioritization:","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"Two alternative functions can used prioritization step: ) connectivity_scenario() function, includes connectivity optimization procedure ii) basic_scenario() function, include connectivity. two functions can run separately. Users may use functions, wish compare results obtained two scenarios, .e. without connectivity. Alternatively, connectivity_scenario() function can run obtain prioritization outputs connectivity scenario. functions based priorititizr package (Hanson et al., 2024). connectivity metrics first transformed rasters, following approach similar Marxan Connect (Daigle et al., 2020). priorititizr maximizes utility obtained protecting features connections. Mathematically, target optimization maximize U budget (B) limitations (eq. 2 3 Nagkoulis et al. (2024)): U=∑𝐏𝐔𝐢∈SA−λci+∑𝐏𝐔𝐢∈SA∑j=1Jμjfj+∑𝐏𝐔𝐢∈SA∑j=1JμjMj, U = \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} -\\lambda c_i + \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} \\sum_{j=1}^J \\mu_j f_j + \\sum_{\\boldsymbol{PU_i} \\, \\\\,SA} \\sum_{j=1}^J \\mu_j M_j, ∑𝐏𝐔𝐢∈SAci≤B \\sum_{\\boldsymbol{PU_i} \\, \\\\, SA} c_i \\leq B set planning units 𝐀=(𝐏𝐔1,𝐏𝐔2,...,𝐏𝐔𝐢,...,𝐏𝐔𝐢)\\boldsymbol{}=(\\boldsymbol{PU}_1, \\boldsymbol{PU}_2, ..., \\boldsymbol{PU_i}, ..., \\boldsymbol{PU_i}) considered protected 𝐏𝐔𝐢∈SA\\boldsymbol{PU_i} \\, \\\\, SA. protection 𝐏𝐔𝐢\\boldsymbol{PU_i} results cost cic_i. finite set features 𝐅=(F1,F2,...,Fj,...,FJ)\\boldsymbol{F}=(F_1, F_2, ... , F_j, ..., F_J) also distributed AA, suggesting features can spatially mapped within PUs. PUPU thus defined spatial object containing following properties: 𝐏𝐔𝐢=(f1,f2,...,fj,...,fJ,ci)\\boldsymbol{PU_i}=(f_1, f_2, ..., f_j, ..., f_J, c_i), fjf_j indicates quantity FjF_j located PUiPU_i. use annotation MjM_j values metric every feature jj. inserting metrics analysis, PU’s (𝐏𝐔𝐢\\boldsymbol{PU_i}) properties extended can expressed follows: 𝐏𝐔𝐢=(f1,f2,...,fj,...,fJ,M1,M2,...,Mj,...,MJ,ci)\\boldsymbol{PU_i} = (f_1, f_2, ..., f_j, ..., f_J, M_1, M_2, ..., M_j, ..., M_J, c_i). first input can given algorithm typical cost layer representing cost protecting single planning unit. cost layer inserted prioritizr. cost layer available, cost layer planning units equal cost can inserted (Fig. 5. algorithm needs cost layer, order determine planning units.  Fig. 5: Cost raster second input features rasters. case rasters available, raster equal values can given algorithm. case used pseudo-raster, adding noise improve performance algorithm.  Fig. 6: Features raster","code":"# Set tmap to “view” mode tmap_mode(\"view\")  # Read the cost raster cost_raster <- get_cost_raster()  # Plot the cost raster with tmap tm_shape(cost_raster) +   tm_raster(title = \"cost\") # Read the features raster features <- get_features_raster()  # Plot the features raster with tmap tm_shape(features) +   tm_raster(title = \"f1\") # Solve an ordinary prioritizr prioritization problem basic_solution <- basic_scenario(                     cost_raster = cost_raster,                     features    = features,                     budget_perc = 0.1                   )  # Solve a prioritizr prioritization problem, # by incorporating graph connectivity of the features connectivity_solution <- connectivity_scenario(                            cost_raster = cost_raster,                            features    = features,                            budget_perc = 0.1,                            pre_graphs  = pre_graphs                          )"},{"path":"https://cadam00.github.io/priorCON/index.html","id":"step-4-post-processing","dir":"","previous_headings":"Illustration example","what":"Step 4: Post-processing:","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"results obtained prioritizr presented using matrices plots, allowing user compare outcomes incorporating connectivity metrics analysis. Function get_outputs() takes input prioritization solution. user can also get outputs shapefiles raster use analysis.  Fig. 7: Basic solution connections shown  Fig. 8: Connectivity solution connections shown","code":"# Get outputs from basic_scenario function for feature “f1” basic_outputs <- get_outputs(solution   = basic_solution,                               feature    = \"f1\",                              pre_graphs = pre_graphs) basic_outputs$tmap # Print summary of features and connections held # percentages for basic scenario print(basic_outputs$connectivity_table) ##  feature relative_held connections(%) ## 1     f1      0.178563              0 # Get outputs from connectivity_scenario function for feature “f1” connectivity_outputs <- get_outputs(solution   = connectivity_solution,                                     feature    = \"f1\",                                     pre_graphs = pre_graphs) connectivity_outputs$tmap # Print summary of features and connections held percentages # for connectivity scenario print(connectivity_outputs$connectivity_table) ##  feature relative_held connections(%) ## 1     f1     0.1637209      0.3339886"},{"path":"https://cadam00.github.io/priorCON/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Graph Community Detection Methods into Systematic Conservation Planning","text":"Csárdi, Gábor, Tamás Nepusz. 2006. “igraph software package complex network research.” InterJournal Complex Systems: 1695. https://igraph.org. Csárdi, Gábor, Tamás Nepusz, Vincent Traag, Szabolcs Horvát, Fabio Zanini, Daniel Noom, Kirill Müller. 2024.  igraph: Network Analysis Visualization R. https://doi.org/10.5281/zenodo.7682609. Daigle, Rémi M., Anna Metaxas, Arieanna C. Balbar, Jennifer McGowan, Eric . Treml, Caitlin D. Kuempel, Hugh P. Possingham, Maria Beger. 2020. “ Operationalizing ecological connectivity spatial conservation planning Marxan Connect.” Methods Ecology Evolution 11 (4): 570–79. https://doi.org/10.1111/2041-210X.13349. Hanson, Jeffrey O, Richard Schuster, Nina Morrell, Matthew Strimas-Mackey, Brandon P M Edwards, Matthew E Watts, Peter Arcese, Joseph R Bennett, Hugh P Possingham. 2024.  prioritizr: Systematic Conservation Prioritization R. https://CRAN.R-project.org/package=prioritizr. Watson, Christopher G. 2024. brainGraph: Graph Theory Analysis Brain MRI Data. https://doi.org/10.32614/CRAN.package.brainGraph.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic scenario problem — basic_scenario","title":"Basic scenario problem — basic_scenario","text":"Solve ordinary prioritizr prioritization problem.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic scenario problem — basic_scenario","text":"","code":"basic_scenario(cost_raster, features_rasters, budget_perc, locked_in = NULL, locked_out = NULL)"},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic scenario problem — basic_scenario","text":"cost_raster SpatRaster object used cost prioritization. coordinates must correspond input given preprocess_graphs. features_rasters features SpatRaster object used prioritization. coordinates must correspond input given preprocess_graphs. budget_perc numeric value \\([0,1]\\). represents budget percentage cost used prioritization. locked_in SpatRaster object used locked constraints, planning units selected solution, e.g. current protected areas. details, see prioritizr::add_locked_in_constraints. locked_out SpatRaster object used locked constraints, planning units excluded solution, e.g. appropriate protected areas. details, see prioritizr::add_locked_out_constraints.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic scenario problem — basic_scenario","text":"basic prioritization problem created solved using prioritizr package. solver used solving problems best available computer, following solver hierarchy prioritizr. default, highs package using HiGHS solver downloaded package installation.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic scenario problem — basic_scenario","text":"list containing input get_outputs.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic scenario problem — basic_scenario","text":"Hanson, Jeffrey O, Richard Schuster, Nina Morrell, Matthew Strimas-Mackey, Brandon P M Edwards, Matthew E Watts, Peter Arcese, Joseph Bennett, Hugh P Possingham. 2024. prioritizr: Systematic Conservation Prioritization R. https://prioritizr.net. Huangfu, Qi, JA Julian Hall. 2018. Parallelizing Dual Revised Simplex Method. Mathematical Programming Computation 10 (1): 119–42. doi:10.1007/s12532-017-0130-5","code":""},{"path":[]},{"path":"https://cadam00.github.io/priorCON/reference/basic_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic scenario problem — basic_scenario","text":"","code":"# Read connectivity files from folder and combine them combined_edge_list <- preprocess_graphs(system.file(\"external\", package=\"priorCON\"),                                         header = FALSE, sep =\";\")  # Set seed for reproducibility set.seed(42)  cost_raster <- get_cost_raster() features_rasters <- get_features_raster()  # Solve an ordinary prioritizr prioritization problem basic_solution <- basic_scenario(cost_raster=cost_raster, features_rasters=features_rasters, budget_perc=0.1)"},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Connectivity scenario problem — connectivity_scenario","title":"Connectivity scenario problem — connectivity_scenario","text":"Solve prioritizr prioritization problem, incorporating graph connectivity features.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connectivity scenario problem — connectivity_scenario","text":"","code":"connectivity_scenario(cost_raster, features_rasters = NULL, budget_perc,                       pre_graphs, locked_in = NULL, locked_out = NULL)"},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connectivity scenario problem — connectivity_scenario","text":"cost_raster SpatRaster object used cost prioritization. coordinates must correspond input given preprocess_graphs. features_rasters features SpatRaster object used prioritization. coordinates must correspond input given preprocess_graphs. budget_perc numeric value \\([0,1]\\). represents budget percentage cost used prioritization. pre_graphs output get_metrics function. locked_in SpatRaster object used locked constraints, planning units selected solution, e.g. current protected areas. details, see prioritizr::add_locked_in_constraints. locked_out SpatRaster object used locked constraints, planning units excluded solution, e.g. appropriate protected areas. details, see prioritizr::add_locked_out_constraints.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connectivity scenario problem — connectivity_scenario","text":"connectivity prioritization problem created solved using prioritizr package. solver used solving problems best available computer, following solver hierarchy prioritizr. default, highs package using HiGHS solver downloaded package installation.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connectivity scenario problem — connectivity_scenario","text":"list containing input get_outputs.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Connectivity scenario problem — connectivity_scenario","text":"Hanson, Jeffrey O, Richard Schuster, Nina Morrell, Matthew Strimas-Mackey, Brandon P M Edwards, Matthew E Watts, Peter Arcese, Joseph Bennett, Hugh P Possingham. 2024. prioritizr: Systematic Conservation Prioritization R. https://prioritizr.net. Huangfu, Qi, JA Julian Hall. 2018. Parallelizing Dual Revised Simplex Method. Mathematical Programming Computation 10 (1): 119–42. doi:10.1007/s12532-017-0130-5","code":""},{"path":[]},{"path":"https://cadam00.github.io/priorCON/reference/connectivity_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connectivity scenario problem — connectivity_scenario","text":"","code":"# Read connectivity files from folder and combine them combined_edge_list <- preprocess_graphs(system.file(\"external\", package=\"priorCON\"),                                         header = FALSE, sep =\";\")  # Set seed for reproducibility set.seed(42)  # Detect graph communities using the s-core algorithm pre_graphs <- get_metrics(combined_edge_list, which_community = \"s_core\")  cost_raster <- get_cost_raster() features_rasters <- get_features_raster()  # Solve a prioritizr prioritization problem, # by incorporating graph connectivity of the features connectivity_solution <- connectivity_scenario(cost_raster=cost_raster, features_rasters=features_rasters, budget_perc=0.1, pre_graphs=pre_graphs)"},{"path":"https://cadam00.github.io/priorCON/reference/get_cost_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost raster example — get_cost_raster","title":"Cost raster example — get_cost_raster","text":"Cost raster example.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_cost_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost raster example — get_cost_raster","text":"","code":"get_cost_raster()"},{"path":"https://cadam00.github.io/priorCON/reference/get_cost_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost raster example — get_cost_raster","text":"cost SpatRaster object use examples.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_cost_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cost raster example — get_cost_raster","text":"","code":"library(tmap) #> Breaking News: tmap 3.x is retiring. Please test v4, e.g. with #> remotes::install_github('r-tmap/tmap')  ## Import features_raster cost_raster <- get_cost_raster()  ## Plot with tmap tm_shape(cost_raster) +   tm_raster(title = \"cost\")"},{"path":"https://cadam00.github.io/priorCON/reference/get_features_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Features raster example — get_features_raster","title":"Features raster example — get_features_raster","text":"Features raster example.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_features_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Features raster example — get_features_raster","text":"","code":"get_features_raster()"},{"path":"https://cadam00.github.io/priorCON/reference/get_features_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Features raster example — get_features_raster","text":"features SpatRaster object use examples.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_features_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Features raster example — get_features_raster","text":"","code":"library(tmap)  ## Import features_raster features_raster <- get_features_raster()  ## Plot with tmap tm_shape(features_raster) +   tm_raster(title = \"f1\")"},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect graph communities for each biodiversity feature. — get_metrics","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"Detect graph communities biodiversity feature.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"","code":"get_metrics(connect_mat, which_community = \"s_core\")"},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"connect_mat data.frame object edge lists contained. See details. which_community character value community type detection. can one \"s_core\", \"louvain\", \"walktrap\", \"eigen\", \"betw\", \"deg\" \"page_rank\". default \"s_core\".","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"Function get_metrics used calculate graph metrics values. edge lists created previous step, inserted directly user used step create graphs. directed graphs transformed undirected. function based igraph package used create clusters using Louvain Walktrap calculate following metrics: Eigenvector Centrality, Betweenness Centrality Degree PageRank. S-core calculated using package brainGraph. connect_mat either output preprocess_graphs custom edge list data.frame object, following columns: feature: feature name. .X: longitude origin (source). .Y: latitude origin (source). .X: longitude destination (target). .Y: latitude destination (target). weight: connection weight.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"list containing input basic_scenario connectivity_scenario.","code":""},{"path":[]},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"Csárdi, Gábor, Tamás Nepusz. 2006. Igraph Software Package Complex Network Research. InterJournal Complex Systems: 1695. https://igraph.org. Csárdi, Gábor, Tamás Nepusz, Vincent Traag, Szabolcs Horvát, Fabio Zanini, Daniel Noom, Kirill Müller. 2024. igraph: Network Analysis Visualization R. doi:10.5281/zenodo.7682609 . Watson, Christopher G. 2024. brainGraph: Graph Theory Analysis Brain MRI Data. doi:10.32614/CRAN.package.brainGraph .","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect graph communities for each biodiversity feature. — get_metrics","text":"","code":"# Read connectivity files from folder and combine them combined_edge_list <- preprocess_graphs(system.file(\"external\",                                         package=\"priorCON\"),                                         header = FALSE, sep =\";\")  # Set seed for reproducibility set.seed(42)  # Detect graph communities using the s-core algorithm pre_graphs <- get_metrics(combined_edge_list, which_community = \"s_core\")"},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate outputs — get_outputs","title":"Evaluate outputs — get_outputs","text":"Evaluate outputs basic_scenario connectivity_scenario functions selected feature.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate outputs — get_outputs","text":"","code":"get_outputs(solution, feature, pre_graphs, loose = FALSE, patch = FALSE)"},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate outputs — get_outputs","text":"solution output basic_scenario connectivity_scenario functions. feature character single feature name used plots. pre_graphs output get_metrics function. loose use loose strict graph community connectivity definition. See details. patch logical value. patch = TRUE, different colors can used distinct patch output plots.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate outputs — get_outputs","text":"Loose graph connectivity indicates case two protected nodes (cells) can considered connected, even cells protected (thus included solution), whereas strict connectivity indicates case two protected cells can considered connected, cells also protected. default loose = FALSE, indicating use strict connectivity definition.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate outputs — get_outputs","text":"list containing following items: tmap: tmap plot solution including connections. solution: terra SpatRaster object representing prioritization solution. connections: sf LINESTRING object representing preserved connections solution. connectivity_table: data.frame containing feature names first column, relative held percentages second column percentage connections held third column.","code":""},{"path":[]},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate outputs — get_outputs","text":"Hijmans, Robert J. 2024. terra: Spatial Data Analysis. doi:10.32614/CRAN.package.terra . Pebesma, Edzer. 2018. Simple Features R: Standardized Support Spatial Vector Data. R Journal 10 (1): 439–46. doi:10.32614/RJ-2018-009 . Pebesma, Edzer, Roger Bivand. 2023. Spatial Data Science: applications R. Chapman Hall/CRC. doi:10.1201/9780429459016","code":""},{"path":"https://cadam00.github.io/priorCON/reference/get_outputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate outputs — get_outputs","text":"","code":"# Read connectivity files from folder and combine them combined_edge_list <- preprocess_graphs(system.file(\"external\", package=\"priorCON\"),                                         header = FALSE, sep =\";\")  # Set seed for reproducibility set.seed(42)  # Detect graph communities using the s-core algorithm pre_graphs <- get_metrics(combined_edge_list, which_community = \"s_core\")  cost_raster <- get_cost_raster() features_rasters <- get_features_raster()  # Solve a prioritizr prioritization problem, by incorporating graph connectivity of the features connectivity_solution <- connectivity_scenario(                            cost_raster      = cost_raster,                            features_rasters = features_rasters,                            budget_perc      = 0.1,                            pre_graphs       = pre_graphs                          )  # Get outputs from connectivity_scenario function for feature \"f1\" connectivity_outputs <- get_outputs(solution   = connectivity_solution,                                     feature    = \"f1\",                                     pre_graphs = pre_graphs)  # Plot tmap connectivity_outputs$tmap   # Print summary of features and connections held percentages for connectivity scenario print(connectivity_outputs$connectivity_table) #>   feature relative_held connections(%) #> 1      f1     0.1637209      0.3339886 ##   feature relative_held connections(%) ## 1      f1     0.1637209      0.3339886"},{"path":"https://cadam00.github.io/priorCON/reference/preprocess_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read connectivity data from multiple sub-folders. — preprocess_graphs","title":"Read connectivity data from multiple sub-folders. — preprocess_graphs","text":"Read connectivity data multiple sub-folders.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/preprocess_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read connectivity data from multiple sub-folders. — preprocess_graphs","text":"","code":"preprocess_graphs(path, ...)"},{"path":"https://cadam00.github.io/priorCON/reference/preprocess_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read connectivity data from multiple sub-folders. — preprocess_graphs","text":"path path folder sub-folders containing txt csv files contained. sub-folder name corresponding connectivity data. case connectivity folder corresponds specific biodiversity feature, named corresponding feature. ... additional arguments passed read.csv.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/preprocess_graphs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read connectivity data from multiple sub-folders. — preprocess_graphs","text":"auxiliary function creating edge list data.frame object multiple files, like ones provided softwares estimating Lagrangian models. Function preprocess_graphs takes input list .txt/.csv objects. object represents connections node nodes. model read data, necessary .txt/.csv objects one folder. two ways incorporate connectivity data, based linkage features: Case 1: connectivity data correspond specific biodiversity features. biodiversity feature connectivity dataset file including edge lists needs name corresponding feature. example, consider 5 species (f1, f2, f3, f4, f5) 5 connectivity datasets. connectivity datasets need separate folders named: f1,f2,f3,f4,f5 algorithm understand correspond species. Case 2: connectivity dataset represents spatial pattern directly connected specific biodiversity feature. connectivity data need included separate folder named different way species. example consider 5 species (f1,f2,f3,f4,f5) 1 connectivity dataset. dataset can included separate folder (e.g. \"Langragian_con\").  typical Lagrangian output set files representing likelihood point moving origin (source) destination (target). can represented using list .txt/.csv files (many origin points) including information destination probability. .txt/.csv files need named increasing order. name files need correspond numbering points, order algorithm match coordinates points.","code":""},{"path":"https://cadam00.github.io/priorCON/reference/preprocess_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read connectivity data from multiple sub-folders. — preprocess_graphs","text":"edge list data.frame object, following columns: feature: feature name. .X: longitude origin (source). .Y: latitude origin (source). .X: longitude destination (target). .Y: latitude destination (target). weight: connection weight.","code":""},{"path":[]},{"path":"https://cadam00.github.io/priorCON/reference/preprocess_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read connectivity data from multiple sub-folders. — preprocess_graphs","text":"","code":"# Read connectivity files from folder and combine them combined_edge_list <- preprocess_graphs(system.file(\"external\",                                         package=\"priorCON\"),                                         header = FALSE, sep =\";\") head(combined_edge_list) #>   feature   from.X   from.Y     to.X     to.Y weight #> 1      f1 22.62309 40.30342 22.62309 40.30342  0.000 #> 2      f1 22.62309 40.30342 22.62309 40.39144  0.000 #> 3      f1 22.62309 40.30342 22.62309 40.41341  0.000 #> 4      f1 22.62309 40.30342 22.62309 40.43537  0.005 #> 5      f1 22.62309 40.30342 22.62309 40.45731  0.000 #> 6      f1 22.62309 40.30342 22.65266 40.30342  0.000  ##  feature   from.X   from.Y     to.X     to.Y weight ## 1     f1 22.62309 40.30342 22.62309 40.30342  0.000 ## 2     f1 22.62309 40.30342 22.62309 40.39144  0.000 ## 3     f1 22.62309 40.30342 22.62309 40.41341  0.000 ## 4     f1 22.62309 40.30342 22.62309 40.43537  0.005 ## 5     f1 22.62309 40.30342 22.62309 40.45731  0.000 ## 6     f1 22.62309 40.30342 22.65266 40.30342  0.000"},{"path":[]},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"major-changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Major changes","title":"priorCON 0.1.4","text":"Add locked_in locked_out arguments priorCON::basic_scenario priorCON::connectivity_scenario.","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"priorcon-013","dir":"Changelog","previous_headings":"","what":"priorCON 0.1.3","title":"priorCON 0.1.3","text":"CRAN release: 2024-11-28","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"minor-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"priorCON 0.1.3","text":"Update package authors DESCRIPTION.","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"priorcon-012","dir":"Changelog","previous_headings":"","what":"priorCON 0.1.2","title":"priorCON 0.1.2","text":"CRAN release: 2024-11-06","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"minor-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"priorCON 0.1.2","text":"Remove redundant r SpatRaster object terra::rasterize use (care “geometry” r, need new object). Update Introduction.Rmd, README DESCRIPTION text. Add pkgdown website.","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"priorcon-011","dir":"Changelog","previous_headings":"","what":"priorCON 0.1.1","title":"priorCON 0.1.1","text":"CRAN release: 2024-09-07","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"priorCON 0.1.1","text":"Add \"page_rank\" option which_community argument get_metrics. Move figures used README.md man/figures. Update README.md Introduction.Rmd text add badges (CRAN version, developer version, R-CMD-check codecov). Fix test-get_metrics.R upcoming ‘igraph’ releases, changes igraph::cluster_louvain, noted Szabolcs Horvát (see https://github.com/cadam00/priorCON/issues/1).","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"priorcon-010","dir":"Changelog","previous_headings":"","what":"priorCON 0.1.0","title":"priorCON 0.1.0","text":"CRAN release: 2024-08-19","code":""},{"path":"https://cadam00.github.io/priorCON/news/index.html","id":"major-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"priorCON 0.1.0","text":"Initial package version.","code":""}]
